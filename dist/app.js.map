{"version":3,"sources":["../src/app.js"],"names":["app","getFilesInfo","file","api","get","filesURL","response","path","lines","data","match","regexLines","size","regexSize","filterResults","responseFiltered","js","ts","json","others","forEach","elt","splittedElt","split","extensionFound","Object","keys","find","extension","length","req","res","send","message","query","Promise","all","files","map","error"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEA;AACA,IAAMC;AAAA,sFAAe,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIC,cAAIC,GAAJ,CAAQC,oBAASH,IAAT,CAAR,CADJ;;AAAA;AACbI,oBADa;AAAA,6CAEZ;AACLJ,oBAAMA,IADD;AAELK,oBAAMF,oBAASH,IAAT,CAFD;AAGLM,qBAAOF,SAASG,IAAT,CAAcC,KAAd,CAAoBC,qBAApB,EAAgC,CAAhC,CAHF;AAILC,oBAAMN,SAASG,IAAT,CAAcC,KAAd,CAAoBG,oBAApB,EAA+B,CAA/B;AAJD,aAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUA;AACA,IAAMC,gBAAgB,SAAhBA,aAAgB,GAAmB;AAAA,MAAlBR,QAAkB,uEAAP,EAAO;;AACvC,MAAMS,mBAAmB;AACvBC,QAAI,EADmB;AAEvBC,QAAI,EAFmB;AAGvBC,UAAM,EAHiB;AAIvBC,YAAQ;AAJe,GAAzB;;AAOAb,WAASc,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxB,QAAMC,cAAcD,IAAInB,IAAJ,CAASqB,KAAT,CAAe,GAAf,CAApB;AACA,QAAMC,iBAAiBC,OAAOC,IAAP,CAAYX,gBAAZ,EAA8BY,IAA9B,CACrB,UAACC,SAAD;AAAA,aAAeN,YAAYA,YAAYO,MAAZ,GAAqB,CAAjC,MAAwCD,SAAvD;AAAA,KADqB,CAAvB;AAGA,QAAIJ,cAAJ,EAAoB;AAClBT,uBAAiBS,cAAjB,+CACKT,iBAAiBS,cAAjB,CADL,IAEEH,GAFF;AAIA;AACD;AACDN,qBAAiB,QAAjB,+CAAiCA,iBAAiB,QAAjB,CAAjC,IAA6DM,GAA7D;AACD,GAbD;;AAeA,SAAON,gBAAP;AACD,CAxBD;;AA0BA;AACAf,IAAII,GAAJ,CAAQ,GAAR,EAAa,UAAC0B,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIC,IAAJ,CAAS;AACPC,aAAS;AADF,GAAT;AAGD,CAJD;;AAMA;AACA;AACAjC,IAAII,GAAJ,CAAQ,YAAR;AAAA,uFAAsB,kBAAgB0B,GAAhB,EAAqBC,GAArB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEdD,IAAII,KAAJ,IAAaJ,IAAII,KAAJ,CAAUhC,IAFT;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGOD,aAAa6B,IAAII,KAAJ,CAAUhC,IAAvB,CAHP;;AAAA;AAGVI,qBAHU;;AAIhByB,gBAAIC,IAAJ,CAAS1B,SAAT;AAJgB;;AAAA;AAAA;AAAA,mBAOK6B,QAAQC,GAAR,CACrBC,iBAAMC,GAAN;AAAA,mGAAU,kBAAOjB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACKpB,aAAaoB,GAAb,CADL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAV;;AAAA;AAAA;AAAA;AAAA,gBADqB,CAPL;;AAAA;AAOZf,oBAPY;;;AAalByB,gBAAIC,IAAJ,CAASlB,cAAcR,QAAd,CAAT;AAbkB;AAAA;;AAAA;AAAA;AAAA;;AAelByB,gBAAIC,IAAJ,CAAS;AACPO,qBAAO,aAAMN;AADN,aAAT;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;kBAqBejC,G","file":"app.js","sourcesContent":["import express from \"express\";\nimport api from \"./api\";\nimport { files, filesURL, regexLines, regexSize } from \"./constants\";\n\nconst app = express();\n\n// This function is used to make a axios http request and get the data from file url\nconst getFilesInfo = async (file) => {\n  const response = await api.get(filesURL[file]);\n  return {\n    file: file,\n    path: filesURL[file],\n    lines: response.data.match(regexLines)[0],\n    size: response.data.match(regexSize)[0],\n  };\n};\n\n// Here the response is filtered\nconst filterResults = (response = []) => {\n  const responseFiltered = {\n    js: [],\n    ts: [],\n    json: [],\n    others: [],\n  };\n\n  response.forEach((elt) => {\n    const splittedElt = elt.file.split(\".\");\n    const extensionFound = Object.keys(responseFiltered).find(\n      (extension) => splittedElt[splittedElt.length - 1] === extension\n    );\n    if (extensionFound) {\n      responseFiltered[extensionFound] = [\n        ...responseFiltered[extensionFound],\n        elt,\n      ];\n      return;\n    }\n    responseFiltered[\"others\"] = [...responseFiltered[\"others\"], elt];\n  });\n\n  return responseFiltered;\n};\n\n// This is a default route\napp.get(\"/\", (req, res) => {\n  res.send({\n    message: \"Call /financeJS to get results or /financeJS?file=index.js\",\n  });\n});\n\n// This is our route to get data from all files calling /financeJS route, but if you wnat get data from just one\n// file, you can call /financeJS?file=index.js for example, passing the name of file to \"file=\"\napp.get(\"/financeJS\", async function (req, res) {\n  try {\n    if (req.query && req.query.file) {\n      const response = await getFilesInfo(req.query.file);\n      res.send(response);\n      return;\n    }\n    const response = await Promise.all(\n      files.map(async (elt) => {\n        return await getFilesInfo(elt);\n      })\n    );\n\n    res.send(filterResults(response));\n  } catch (error) {\n    res.send({\n      error: error.message,\n    });\n  }\n});\n\nexport default app;\n"]}